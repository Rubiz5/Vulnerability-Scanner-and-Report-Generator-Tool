import requests
from requests.exceptions import SSLError, ConnectionError
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# Function to check SSL/TLS vulnerabilities
def ssl_check(url):
    try:
        response = requests.get(url, verify=True, timeout=5)
        if response.status_code == 200:
            return "No SSL/TLS vulnerabilities found.", 0
    except SSLError as e:
        return f"SSL/TLS vulnerability detected: {e}", 9.8
    except ConnectionError as e:
        return f"Connection error: {e}", 0
    return "Unknown", 0

# Function to perform SQL injection check
def sqli_check(url):
    try:
        response = requests.get(url + "'")
        if any(keyword in response.text for keyword in ["mysql", "sql syntax", "mysql_fetch_array"]):
            return "Possible SQL injection vulnerability detected.", 7.5
    except Exception as e:
        return f"Error: {e}", 0
    return "No SQL injection vulnerabilities found.", 0

# Function to perform XSS check
def xss_check(url):
    try:
        response = requests.get(url)
        if "<script>" in response.text:
            return "Possible XSS vulnerability detected.", 4.3
    except Exception as e:
        return f"Error: {e}", 0
    return "No XSS vulnerabilities found.", 0

# Function to check for directory traversal
def directory_traversal_check(url):
    try:
        response = requests.get(url + "../../../../etc/passwd")
        if "root:" in response.text:
            return "Possible directory traversal vulnerability detected.", 5.3
    except Exception as e:
        return f"Error: {e}", 0
    return "No directory traversal vulnerabilities found.", 0

# Function to check for sensitive data exposure
def sensitive_data_exposure_check(url):
    try:
        response = requests.get(url)
        if "password" in response.text.lower() or "credit card" in response.text.lower():
            return "Possible sensitive data exposure detected.", 6.5
    except Exception as e:
        return f"Error: {e}", 0
    return "No sensitive data exposure vulnerabilities found.", 0

# Function to check for insecure deserialization
def insecure_deserialization_check(url):
    try:
        response = requests.get(url)
        if "java.io.serialization" in response.text:
            return "Possible insecure deserialization vulnerability detected.", 8.8
    except Exception as e:
        return f"Error: {e}", 0
    return "No insecure deserialization vulnerabilities found.", 0

# Function to check for broken access control
def broken_access_control_check(url):
    try:
        response = requests.get(url + "/admin", timeout=5)
        if response.status_code == 401:
            return "Basic authentication required. Broken access control vulnerability not applicable.", 0
        elif response.status_code == 200:
            return "Possible broken access control vulnerability detected. Admin page accessible without authentication.", 7.5
    except Exception as e:
        return f"Error: {e}", 0
    return "No broken access control vulnerabilities found.", 0

# Function to generate PDF report
def generate_pdf_report(vulnerabilities, file_name):
    c = canvas.Canvas(file_name, pagesize=letter)
    c.setFont("Helvetica-Bold", 16)
    c.drawString(100, 750, "Vulnerability Report")
    c.setFont("Helvetica", 12)
    y = 700
    for vulnerability in vulnerabilities:
        c.drawString(100, y, f"Vulnerability: {vulnerability[0]}")
        c.drawString(100, y - 20, f"Description: {vulnerability[1]}")
        c.drawString(100, y - 40, f"CVSS Score: {vulnerability[2]}")
        y -= 70
    c.save()

# Main function
def main():
    url = input("Enter the website URL (e.g., https://example.com): ")
    print("\nScanning for vulnerabilities...")

    # Initialize vulnerability report
    vulnerabilities = []

    # Check SSL/TLS vulnerabilities
    message, cvss_score = ssl_check(url)
    vulnerabilities.append(("SSL/TLS", message, cvss_score))

    # Check for SQL injection vulnerabilities
    message, cvss_score = sqli_check(url)
    vulnerabilities.append(("SQL Injection", message, cvss_score))

    # Check for XSS vulnerabilities
    message, cvss_score = xss_check(url)
    vulnerabilities.append(("XSS", message, cvss_score))

    # Check for directory traversal vulnerabilities
    message, cvss_score = directory_traversal_check(url)
    vulnerabilities.append(("Directory Traversal", message, cvss_score))

    # Check for sensitive data exposure vulnerabilities
    message, cvss_score = sensitive_data_exposure_check(url)
    vulnerabilities.append(("Sensitive Data Exposure", message, cvss_score))

    # Check for insecure deserialization vulnerabilities
    message, cvss_score = insecure_deserialization_check(url)
    vulnerabilities.append(("Insecure Deserialization", message, cvss_score))

    # Check for broken access control vulnerabilities
    message, cvss_score = broken_access_control_check(url)
    vulnerabilities.append(("Broken Access Control", message, cvss_score))

    # Generate PDF report
    report_file = "vulnerability_report.pdf"
    generate_pdf_report(vulnerabilities, report_file)
    print(f"\nVulnerability report saved as '{report_file}'.")

if __name__ == "__main__":
    main()
